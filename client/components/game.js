import { setTally } from '../actions/gameActions'

export default function game (p) {

var started = false;
var drawMode = false;
var userPattern = false;
var paused = false;
var columns;
var rows;
var board;
var cnv;
var myprops = {};
var myCounters = {
  generations: 0,

  reset : function() {
    this.generations = 0
  },
  incrementGen: function() {
    this.generations++;
  }
};

//var maxCycles = 3;

const Patterns = {  
  GLIDER_FACTORY : {
    data
    cols: 49,
    rows: 37      
  },
  DESTROY_EATER : {
    data: '000000000000000000000000000000000000000000000000000000000000000000000000000101000000000000000000000000000000000000000000000000000000000011000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110000000000000000000000000000000000000000000000000000000011011000000000000000000000000000000000000000000000000000000011110000000000000000000000000000000000000000000000000000000001100000000000000000000000000000000000000000000000001100000000000000000000000000000000000000000000000000000000001010000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000011000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',
    cols: 60,
    rows: 40    
  },
  DESTROY_EATER2 : {
    data
    cols: 60,
    rows: 40     
  },
  EPIC_BATTLE: {
    data
    cols: 60,
    rows: 40
  },
  GLIDER_POWER: {
    data
    cols: 60,
    rows: 40
  },
  CELL_EATER: {
    data
    cols: 60,
    rows: 40
  },
  TAPESTRY: {
    data
    cols: 60,
    rows: 40    
  },
  PENTOMINO: {
    data
    cols: 60,
    rows: 40    
  },
  USER_DRAWN: {
    data: {
      big: undefined,
      small: undefined
    },
    cols: {
      big: 0,
      small: 0
    },
    rows: {
      big: 0,
      small: 0
    }
  }
}

const colors = {}

const mouseOps =  {
  paths : [], //mouse drawing path 
  painting: false, //painting mode on (continuous mouse drag)
  next: 0, //nexy cycle timeout
  current: {}, //current mouse location
  previous: {} //previous mouse location
}

class Cell { 
  constructor(row,col,w=10) {
    this._y = row;
    this._x = col;
    this.w = w;
    this.state = 0;
    this.previous = 0;
  }
  newstate(s) {
    this.previous = this.state;
    this.state = s;   
  }
  initialState(s) {
    this.previous = this.state = s;   
  }

  chkClick() {
    var preferredColor;
    const { _y, _x, w, state, previous } = this;
    if (p.mouseX >= (_x*w) && p.mouseX <= (_x*w)+w-1 &&
        p.mouseY >= (_y*w) && p.mouseY <= (_y*w)+w-1 ) {
      if (state==0) {
        this.initialState(1);
        preferredColor = colors.userpaint;
      } else {
        this.initialState(0);
        preferredColor = colors.vacant;
      }
      this.display(preferredColor);
    }
  }

  display(preferredColor=null) {
    const { _y, _x, w, state, previous } = this
  
    if (preferredColor !== null) {
      p.fill(preferredColor); 
    } else {
      if (previous == 0 && state == 1) p.fill(colors.babyborn) //baby born
      else if(state == 1) p.fill(colors.survivor) //survivor
      else if(previous == 1 && state == 0)  p.fill(colors.death) //death
      else p.fill(colors.vacant); //none   
    }

    p.strokeWeight(0.3);
    p.stroke(176);

    p.rect(_x*w, _y*w, w-1, w-1);
  }

}  

  p.setup = function () {
    defineColorSet();

    p.createCanvas(600, 400);
    p.pixelDensity(1);

    var w = 10;

    createBoard(w);

    displayBoard();
    init();
  }

  function createBoard(w=10) {
    columns = Math.floor(p.width/w);
    rows = Math.floor(p.height/w);

    board = new Array(rows);
    for (var i = 0; i < board.length; i++) {
      board[i] = new Array(columns);
    } 

    for (var r = 0; r<rows; r++) {
      for (var c = 0; c<columns; c++) {
        board[r][c] = new Cell(r,c,w)
      }
    }

    if (w===10) {
      if (Patterns.USER_DRAWN.data.small === undefined) {
        Patterns.USER_DRAWN.data.small = new Array(columns * rows);
        Patterns.USER_DRAWN.data.small = Patterns.USER_DRAWN.data.small.fill(0).join('');
        Patterns.USER_DRAWN.rows.small = rows;
        Patterns.USER_DRAWN.cols.small = columns;        
      }
    } else {
      if (Patterns.USER_DRAWN.data.big === undefined) {
        Patterns.USER_DRAWN.data.big = new Array(columns * rows);
        Patterns.USER_DRAWN.data.big = Patterns.USER_DRAWN.data.big.fill(0).join('');
        Patterns.USER_DRAWN.rows.big = rows;
        Patterns.USER_DRAWN.cols.big = columns;
      }
    }

  }

  p.myCustomRedrawAccordingToNewPropsHandler = function (props) {    

    var speedChange = false;
    userPattern = false;

    if (Object.keys(myprops).length == 0) {
      Object.assign(myprops, props);
    } else {      
      if (!chkPropChange(props)) return;
      //console.log(`props changed! from ${JSON.stringify(myprops)} to ${JSON.stringify(props)}`);

      //Monitor Speed Change
      if (props.frameRate !== myprops.frameRate) {
        speedChange = true;
      } else {
        speedChange = false;
      }

      //Action! after draw : (equivalent to START with user pattern) 
      if (!props.draw && myprops.draw) {
        userPattern = true;
        saveUserPattern(props);
        started = true;
      }

      //Small after Big  or Big after Small:
      if (!props.big && myprops.big || props.big && !myprops.big) {
        board = undefined;
        createBoard( (props.big) ? 5 : 10);
        displayBoard();
        init();

        //Adjust user pattern to new board dimensions
        if (Patterns.USER_DRAWN.data) { 
          if (!props.pattern) { //If not playing with a pattern
            userPattern = true; //enable by default and show the user pattern on size change
            initPattern(props,'USER_DRAWN');            
            started = true;
          }
        }
      }
    }

    started = (!started) ? props.started : true;  
    paused = props.paused;
    drawMode = props.draw;    

    p.frameRate( props.frameRate );

    if (props.cleared) {      
      clearBoard();      
      setTally(myCounters.generations);//update gen count on screen
    }
    
    if (props.started) {
      if (props.pattern !== undefined && !speedChange) {
        initPattern(props);
      } else {
        if (!props.draw && !userPattern && !speedChange) {
          init();
        }
      }
    }

    if (props.draw) {
      userPattern =  true;
      loadUserPattern(props);
    }

    if (props.big && !myprops.big && !props.pattern && !userPattern) {
      board = undefined;
      createBoard(5);//Cell with is half the size!
      displayBoard();
      init();
    }    

    //Update myprops!
    Object.assign(myprops, props);

  }

  function loadUserPattern(props) {
    if (Patterns.USER_DRAWN.data !== undefined  && !props.pattern) {
      initPattern(props,'USER_DRAWN');
    }
    displayBoard();
  }

  function defineColorSet() {
    colors.userpaint= p.color(0,255,0); //green
    colors.babyborn= p.color(117,252,252); //lightblue
    colors.survivor= p.color(0,190,190); //capriblue
    colors.death= p.color(26,34,34); //darkjungle
    colors.vacant= p.color(21,32,32); //denimblack    
  }

  function chkPropChange(props) {
    for (var i in myprops) {      
      if (myprops[i] !== props[i]) return true;
    }
    return false;
  }

  p.draw = function () {   
    if (!started) return;
    if (paused) return;
    if (drawMode) return;
    //maxCycles --;
    //if (maxCycles<0) return;
    p.background(21,32,32); 
    
    generate();        
    displayBoard();
  
    setPreviousState();
  }

  p.mousePressed = function() {
    //Learning tutorial: https://www.youtube.com/watch?v=DEHsr4XicN8
    //P5 documentation: https://p5js.org/examples/hello-p5-drawing.html
   
    if (!drawMode) return;
    for ( var r = 0; r < rows; r++) {
      for ( var c = 0; c < columns; c++) {      
        board[r][c].chkClick();
      }
    }
  }

  function displayBoard() {
    for ( var r = 0; r < rows; r++) {
      for ( var c = 0; c < columns; c++) {
        board[r][c].display(userPattern?board[r][c].state==1?colors.userpaint:null:null);
      }
    }
  }

  function saveUserPattern(props) {
    //serialize pattern into object
    if (props.big) {
      Patterns.USER_DRAWN.data.big = board.reduce((a, b) => 
                                    a.concat(b)).map((el) => el.state).join('').replace(/,/g, '');

      Patterns.USER_DRAWN.cols.big = columns;
      Patterns.USER_DRAWN.rows.big = rows;
    } else {
      Patterns.USER_DRAWN.data.small = board.reduce((a, b) => 
                                  a.concat(b)).map((el) => el.state).join('').replace(/,/g, '');

      Patterns.USER_DRAWN.cols.small = columns;
      Patterns.USER_DRAWN.rows.small = rows;
    }
  }  

  function clearBoard() {
    init(true);
  }

  function init(clear=false) {
    //maxCycles=5000;
    myCounters.reset();

    for (var i = 0; i < rows; i++) {
      for (var j = 0; j < columns; j++) {
        // Lining the edges with 0s
        if (i == 0 || j == 0 || i == rows-1 || j == columns-1) board[i][j].newstate(0);
        // Filling the rest randomly
        else if (!clear) board[i][j].initialState( getRandomInt(0,2) );
        else   board[i][j].initialState( 0 );
      }
    }
  }

  function initPattern(props, user_Pattern='') {
    myCounters.reset();
    
    const { rows, cols, data } = Patterns[(user_Pattern=='') ? props.pattern : user_Pattern ];

    var dataArray = null;
    var _rows = 0;
    var _cols = 0;

    if (Object.keys(data).find((el) => el==='big'||el==='small')) {
      dataArray = (props.big) ? data.big.split('') : data.small.split('');
      _rows = (props.big) ? rows.big : rows.small;
      _cols = (props.big) ? cols.big : cols.small;      
    } else {
      dataArray = data.split('');
      _rows = rows;
      _cols = cols;
    }
     
    var idx = 0;

    for (var i=0 ; i<_rows; i++) {
      for (var j=0; j<_cols; j++) {
        board[i][j].initialState( (dataArray[idx]==1)?1:0 );
        //NB. Never, ever assign dataArray[idx] to board[i][j], notice the 
        //    necessity to hard code either 1 or 0. If you do... unexpected results do occur in the board!!
        idx++;
      }      
    }
  }

  function flatten(ar,prop='state') {
    return (
      ar.reduce((a,b) => a.concat(b)).map((el)=>el[prop]).join('').replace(/,/g,''));
  }

  function generate() {
    var enableGenCount = false;

    for (var r = 1; r < rows - 1; r++) {
      for (var c = 1; c < columns - 1; c++) {
        var neighbors = 0
        for (var i = -1; i <= 1; i++) {
          for (var j = -1; j <= 1; j++) {

            neighbors += (i==0 && j==0) ? 0 : board[r+i][c+j].previous; 

          }
        }
        
        if ((board[r][c].state == 1) && (neighbors < 2)) {
          board[r][c].newstate(0); //isolation
        }
        else if ((board[r][c].state == 1) && (neighbors > 3)) {
          board[r][c].newstate(0); //overpopulation
        } 
        else if ((board[r][c].state == 0) && (neighbors == 3)) {
          board[r][c].newstate(1); //baby born
        }

        if (board[r][c].state==1) enableGenCount = true;
      }
    }
   
    //update counter:
    if (enableGenCount) {
      myCounters.incrementGen();
      setTally(myCounters.generations);
    }
  }

  function setPreviousState() {
    for (var r = 1; r < rows - 1; r++) {
      for (var c = 1; c < columns - 1; c++) { 
        board[r][c].newstate( board[r][c].state );
      }
    }
  }

  function getRandomInt(min, max) {
    min = Math.ceil(min);
    max = Math.floor(max);
    return Math.floor(Math.random() * (max - min)) + min; //The maximum is exclusive and the minimum is inclusive
  }
}